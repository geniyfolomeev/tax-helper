// Code generated by MockGen. DO NOT EDIT.
// Source: register.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockentrepreneurCreator is a mock of entrepreneurCreator interface.
type MockentrepreneurCreator struct {
	ctrl     *gomock.Controller
	recorder *MockentrepreneurCreatorMockRecorder
}

// MockentrepreneurCreatorMockRecorder is the mock recorder for MockentrepreneurCreator.
type MockentrepreneurCreatorMockRecorder struct {
	mock *MockentrepreneurCreator
}

// NewMockentrepreneurCreator creates a new mock instance.
func NewMockentrepreneurCreator(ctrl *gomock.Controller) *MockentrepreneurCreator {
	mock := &MockentrepreneurCreator{ctrl: ctrl}
	mock.recorder = &MockentrepreneurCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockentrepreneurCreator) EXPECT() *MockentrepreneurCreatorMockRecorder {
	return m.recorder
}

// CreateEntrepreneur mocks base method.
func (m *MockentrepreneurCreator) CreateEntrepreneur(ctx context.Context, tgID int64, regAt, lastAt time.Time, yta float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEntrepreneur", ctx, tgID, regAt, lastAt, yta)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEntrepreneur indicates an expected call of CreateEntrepreneur.
func (mr *MockentrepreneurCreatorMockRecorder) CreateEntrepreneur(ctx, tgID, regAt, lastAt, yta interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEntrepreneur", reflect.TypeOf((*MockentrepreneurCreator)(nil).CreateEntrepreneur), ctx, tgID, regAt, lastAt, yta)
}
